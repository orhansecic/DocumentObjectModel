DOM - The Document Object Model
-------------------------------
- Mutating a content of a website without changing the HTML of a website.
- Basically, the work is done inside of the browser.

- DOM represents the HTML elements as JS objects, for an example, if we have a <h1></h1> element in
HTML then in DOM that element is represented as h1 object.
- Every webpage when it is loading in a browser, the browser takes the HTML and CSS files and goes
through them and creates for every element a JS object that represents it.
- These JS objects also hold attributes of HTML and CSS elements, for an example the "src" of an image
- This process is illustrated here: https://prnt.sc/wjnwa4
- Example with real HTML: https://prnt.sc/wjnwif

**************************************************************************
+ 1. Document Object
+ 2. Selecting
+ 3. Selecting with querySelector() and quesrySelectorAll()
+ 4. Manipulate



**************************************************************************
++++++++++++++++++++++++++++++++++++
+ Document Object+

- Document is an object that is automatically created out of HTML and CSS elements.
- It is the base object on which all HTML and CSS elements are represented as JS objects.
- Of course, like everything else generally, the document object also has its own methods and properties
that are created on the initialization.

- All HTML elements can be found in the "all" property of the "document" object.
- This "all" property is an array that holds HTML elements of the webpage, and user can access them
through their index in the array.
- Every HTML element is an object on its own and it has its own properties that we can then see and 
access and manipulate if we want to.

++++++++++++++++++++++++++++++++++++
+ Selecting +

- Topic on how to select a specific HTML element / elements with JS

1. "getElementById()" method:
-----------------------------
- On the "document" object there exists a method that enables user to select a specific HTML element 
by his id.
- This method is called "getElementById()" and it accepts a string parameter that is equal to some id
attribute of some HTML element.
- What is returned with this method is not the HTML element, the method returns the JS object created
for that HTML element, basically the object that is part of the "document" object.

2. "getElementsByTagName()" method:
-----------------------------------
- Also a method attached to the document object.
- This method is used for finding all specific tags, meaning for an example if we want to get all "img"
tags, we just put the "img" string as a argument of the method and it will return all "img" tags of the
HTML file.
- "getElementsById()" method will return multiple tags, most likely, and it will return them in something
called the "HTML Collection".
- "HTML Collection" is similar to array, items are indexed with number and you access them and mutate
them with "[]" but it is not an array, its an array-like object.
- Example of selecting all "img" tags and getting a HTML Collection of them: https://prnt.sc/wjwj1w

3. "getElementsByClassName()" method:
-------------------------------------
- If we understand the logic in the 2 methods before this one is straight forward.
- We select and return all objects that represent HTML elements of specific class.
- It also returns the "HTML Collection" same as "getElementsByTagName()".

++++++++++++++++++++++++++++++++++++
+ Selecting with querySelector() and quesrySelectorAll()+

1. "querySelector()" method:
----------------------------
- querySelector() are used in the same way as getElement... methods
- it basically returns a element that we selected.
- the difference is that querySelector() is able to accept as argument all three values of three different
getElement... methods but it only returns a single HTML element, it can never return a collection.
- the element that is returned is the first element that satisfied the search.
- document.querySelector("p") - will return the first p element of HTML document

- important to note is that if we pass a class name or the id name as the argument we have to use 
the CSS symbols for classes and ids, ".classname" or "#idname"

2. "querySelectorAll()" method:
-------------------------------
- the same logic remains as it did with "querySelector()" just this method is able to return multiple
HTML elements as a "Node List".
- As far as I am able to understand is that "Node List" behaves the same way as "HTML Collection".

++++++++++++++++++++++++++++++++++++
+ Manipulate +

- Everything until now was to understand on how to select the specific element or group of elements 
through the document object.
- Impacting the webpage with JS.

1. "innerText" property
-----------------------
- "innerText" is a property of most HTML elements that holds the value of text that is between the 
opening and closing tags of HTML.
- changing the value of this property will change the content that that HTML element represents.
- For an example, document.querySelector("p").innerText = "KoKo", will make the paragraph tag have a
content of "KoKo".

2. "innerHTML" property
-----------------------
- it works the same way as "innerText" property just the biggest difference is that "innerHTML" can
accept and read the html tags that we add to the value of "innerHTML" while "innerText" just treats 
them like basic string.
- Example, document.querySelector("p").innerHTML = "<b>KoKo</b>" will return the "KoKo" string bolded
but if we used "innerText" it would return "<b>KoKo</b>" as the content of the paragraph.

- Important -
- we do not have to overwrite the value of property every time, we can also add to the property by using
the "+=" operator, typical for strings when we want to add something to the current value.
